////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : Divide_8bit_8bit_restore.vf
// /___/   /\     Timestamp : 05/30/2015 19:31:51
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog E:/FPGA_Xilinx/FIRA_2.0/Divide_8bit_8bit_restore.vf -w E:/FPGA_Xilinx/Fira_Fuzzy/Divide_8bit_8bit_restore.sch
//Design Name: Divide_8bit_8bit_restore
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module FD8CE_MXILINX_Divide_8bit_8bit_restore(C, 
                                              CE, 
                                              CLR, 
                                              D, 
                                              Q);

    input C;
    input CE;
    input CLR;
    input [7:0] D;
   output [7:0] Q;
   
   
   FDCE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[0]), 
              .Q(Q[0]));
   FDCE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[1]), 
              .Q(Q[1]));
   FDCE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[2]), 
              .Q(Q[2]));
   FDCE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[3]), 
              .Q(Q[3]));
   FDCE #( .INIT(1'b0) ) I_Q4 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[4]), 
              .Q(Q[4]));
   FDCE #( .INIT(1'b0) ) I_Q5 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[5]), 
              .Q(Q[5]));
   FDCE #( .INIT(1'b0) ) I_Q6 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[6]), 
              .Q(Q[6]));
   FDCE #( .INIT(1'b0) ) I_Q7 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[7]), 
              .Q(Q[7]));
endmodule
`timescale 1ns / 1ps

module FTCE_MXILINX_Divide_8bit_8bit_restore(C, 
                                             CE, 
                                             CLR, 
                                             T, 
                                             Q);

   parameter INIT = 1'b0;
   
    input C;
    input CE;
    input CLR;
    input T;
   output Q;
   
   wire TQ;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   XOR2  I_36_32 (.I0(T), 
                 .I1(Q_DUMMY), 
                 .O(TQ));
   (* RLOC = "X0Y0" *) 
   FDCE  I_36_35 (.C(C), 
                 .CE(CE), 
                 .CLR(CLR), 
                 .D(TQ), 
                 .Q(Q_DUMMY));
endmodule
`timescale 1ns / 1ps

module CB4CE_MXILINX_Divide_8bit_8bit_restore(C, 
                                              CE, 
                                              CLR, 
                                              CEO, 
                                              Q0, 
                                              Q1, 
                                              Q2, 
                                              Q3, 
                                              TC);

    input C;
    input CE;
    input CLR;
   output CEO;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   output TC;
   
   wire T2;
   wire T3;
   wire XLXN_1;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire Q3_DUMMY;
   wire TC_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign Q3 = Q3_DUMMY;
   assign TC = TC_DUMMY;
   (* HU_SET = "I_Q0_32" *) 
   FTCE_MXILINX_Divide_8bit_8bit_restore #( .INIT(1'b0) ) I_Q0 (.C(C), 
                                               .CE(CE), 
                                               .CLR(CLR), 
                                               .T(XLXN_1), 
                                               .Q(Q0_DUMMY));
   (* HU_SET = "I_Q1_33" *) 
   FTCE_MXILINX_Divide_8bit_8bit_restore #( .INIT(1'b0) ) I_Q1 (.C(C), 
                                               .CE(CE), 
                                               .CLR(CLR), 
                                               .T(Q0_DUMMY), 
                                               .Q(Q1_DUMMY));
   (* HU_SET = "I_Q2_34" *) 
   FTCE_MXILINX_Divide_8bit_8bit_restore #( .INIT(1'b0) ) I_Q2 (.C(C), 
                                               .CE(CE), 
                                               .CLR(CLR), 
                                               .T(T2), 
                                               .Q(Q2_DUMMY));
   (* HU_SET = "I_Q3_35" *) 
   FTCE_MXILINX_Divide_8bit_8bit_restore #( .INIT(1'b0) ) I_Q3 (.C(C), 
                                               .CE(CE), 
                                               .CLR(CLR), 
                                               .T(T3), 
                                               .Q(Q3_DUMMY));
   AND4  I_36_31 (.I0(Q3_DUMMY), 
                 .I1(Q2_DUMMY), 
                 .I2(Q1_DUMMY), 
                 .I3(Q0_DUMMY), 
                 .O(TC_DUMMY));
   AND3  I_36_32 (.I0(Q2_DUMMY), 
                 .I1(Q1_DUMMY), 
                 .I2(Q0_DUMMY), 
                 .O(T3));
   AND2  I_36_33 (.I0(Q1_DUMMY), 
                 .I1(Q0_DUMMY), 
                 .O(T2));
   VCC  I_36_58 (.P(XLXN_1));
   AND2  I_36_67 (.I0(CE), 
                 .I1(TC_DUMMY), 
                 .O(CEO));
endmodule
`timescale 1ns / 1ps

module Left_Shift_8Bit_MUSER_Divide_8bit_8bit_restore(Inp, 
                                                      Out_0, 
                                                      Outp);

    input [7:0] Inp;
    input Out_0;
   output [7:0] Outp;
   
   
   BUF  XLXI_2 (.I(Inp[6]), 
               .O(Outp[7]));
   BUF  XLXI_3 (.I(Inp[5]), 
               .O(Outp[6]));
   BUF  XLXI_4 (.I(Inp[4]), 
               .O(Outp[5]));
   BUF  XLXI_5 (.I(Inp[3]), 
               .O(Outp[4]));
   BUF  XLXI_7 (.I(Out_0), 
               .O(Outp[0]));
   BUF  XLXI_9 (.I(Inp[1]), 
               .O(Outp[2]));
   BUF  XLXI_10 (.I(Inp[0]), 
                .O(Outp[1]));
   BUF  XLXI_11 (.I(Inp[2]), 
                .O(Outp[3]));
endmodule
`timescale 1ns / 1ps

module Mux_2_8Bit_MUSER_Divide_8bit_8bit_restore(Inp0, 
                                                 Inp1, 
                                                 Sel, 
                                                 Outp);

    input [7:0] Inp0;
    input [7:0] Inp1;
    input Sel;
   output [7:0] Outp;
   
   
   MUXCY  XLXI_18 (.CI(Inp1[1]), 
                  .DI(Inp0[1]), 
                  .S(Sel), 
                  .O(Outp[1]));
   MUXCY  XLXI_19 (.CI(Inp1[0]), 
                  .DI(Inp0[0]), 
                  .S(Sel), 
                  .O(Outp[0]));
   MUXCY  XLXI_20 (.CI(Inp1[2]), 
                  .DI(Inp0[2]), 
                  .S(Sel), 
                  .O(Outp[2]));
   MUXCY  XLXI_21 (.CI(Inp1[3]), 
                  .DI(Inp0[3]), 
                  .S(Sel), 
                  .O(Outp[3]));
   MUXCY  XLXI_24 (.CI(Inp1[4]), 
                  .DI(Inp0[4]), 
                  .S(Sel), 
                  .O(Outp[4]));
   MUXCY  XLXI_25 (.CI(Inp1[5]), 
                  .DI(Inp0[5]), 
                  .S(Sel), 
                  .O(Outp[5]));
   MUXCY  XLXI_26 (.CI(Inp1[6]), 
                  .DI(Inp0[6]), 
                  .S(Sel), 
                  .O(Outp[6]));
   MUXCY  XLXI_27 (.CI(Inp1[7]), 
                  .DI(Inp0[7]), 
                  .S(Sel), 
                  .O(Outp[7]));
endmodule
`timescale 1ns / 1ps

module sub9bit_MUSER_Divide_8bit_8bit_restore(A, 
                                              ADD, 
                                              B, 
                                              CI, 
                                              CO, 
                                              OFL, 
                                              S);

    input [8:0] A;
    input ADD;
    input [8:0] B;
    input CI;
   output CO;
   output OFL;
   output [8:0] S;
   
   wire C0;
   wire C1;
   wire C2;
   wire C3;
   wire C4;
   wire C5;
   wire C6;
   wire C6O;
   wire I0;
   wire I1;
   wire I2;
   wire I3;
   wire I4;
   wire I5;
   wire I6;
   wire I8;
   wire SUB0;
   wire SUB1;
   wire SUB2;
   wire SUB3;
   wire SUB4;
   wire SUB5;
   wire SUB6;
   wire SUB7;
   wire SUB8;
   wire XLXN_329;
   wire XLXN_346;
   wire CO_DUMMY;
   
   assign CO = CO_DUMMY;
   XOR3  I_36_50 (.I0(A[0]), 
                 .I1(B[0]), 
                 .I2(SUB0), 
                 .O(I0));
   (* RLOC = "X1Y0" *) 
   MUXCY_L  I_36_55 (.CI(C0), 
                    .DI(A[1]), 
                    .S(I1), 
                    .LO(C1));
   XOR3  I_36_56 (.I0(A[2]), 
                 .I1(B[2]), 
                 .I2(SUB2), 
                 .O(I2));
   XOR3  I_36_57 (.I0(A[3]), 
                 .I1(B[3]), 
                 .I2(SUB3), 
                 .O(I3));
   (* RLOC = "X1Y1" *) 
   MUXCY_L  I_36_58 (.CI(C2), 
                    .DI(A[3]), 
                    .S(I3), 
                    .LO(C3));
   XOR3  I_36_59 (.I0(A[6]), 
                 .I1(B[6]), 
                 .I2(SUB6), 
                 .O(I6));
   XOR3  I_36_60 (.I0(A[4]), 
                 .I1(B[4]), 
                 .I2(SUB4), 
                 .O(I4));
   (* RLOC = "X1Y1" *) 
   MUXCY_L  I_36_62 (.CI(C1), 
                    .DI(A[2]), 
                    .S(I2), 
                    .LO(C2));
 
   MUXCY_L  I_36_63 (.CI(C3), 
                    .DI(A[4]), 
                    .S(I4), 
                    .LO(C4));
   XORCY  I_36_73 (.CI(CI), 
                  .LI(I0), 
                  .O(S[0]));
   XORCY  I_36_74 (.CI(C0), 
                  .LI(I1), 
                  .O(S[1]));
   XORCY  I_36_75 (.CI(C2), 
                  .LI(I3), 
                  .O(S[3]));
   XORCY  I_36_76 (.CI(C1), 
                  .LI(I2), 
                  .O(S[2]));
   XORCY  I_36_77 (.CI(C4), 
                  .LI(I5), 
                  .O(S[5]));
   XORCY  I_36_78 (.CI(C3), 
                  .LI(I4), 
                  .O(S[4]));
   XOR3  I_36_79 (.I0(A[7]), 
                 .I1(B[7]), 
                 .I2(SUB7), 
                 .O(XLXN_329));
   XORCY  I_36_80 (.CI(C6), 
                  .LI(XLXN_329), 
                  .O(S[7]));
   XORCY  I_36_81 (.CI(C5), 
                  .LI(I6), 
                  .O(S[6]));
   XOR3  I_36_100 (.I0(A[1]), 
                  .I1(B[1]), 
                  .I2(SUB1), 
                  .O(I1));
   XOR3  I_36_109 (.I0(A[5]), 
                  .I1(B[5]), 
                  .I2(SUB5), 
                  .O(I5));

   MUXCY_L  I_36_110 (.CI(C4), 
                     .DI(A[5]), 
                     .S(I5), 
                     .LO(C5));
   (* RLOC = "X1Y0" *) 
   MUXCY_L  I_36_111 (.CI(CI), 
                     .DI(A[0]), 
                     .S(I0), 
                     .LO(C0));
   INV  I_36_112 (.I(ADD), 
                 .O(SUB0));
   XOR2  I_36_221 (.I0(C6O), 
                  .I1(CO_DUMMY), 
                  .O(OFL));
   INV  I_36_222 (.I(ADD), 
                 .O(SUB1));
   INV  I_36_223 (.I(ADD), 
                 .O(SUB2));
   INV  I_36_224 (.I(ADD), 
                 .O(SUB3));
   INV  I_36_225 (.I(ADD), 
                 .O(SUB4));
   INV  I_36_226 (.I(ADD), 
                 .O(SUB5));
   INV  I_36_227 (.I(ADD), 
                 .O(SUB6));
   INV  I_36_228 (.I(ADD), 
                 .O(SUB7));
   (* RLOC = "X1Y3" *) 
   MUXCY  XLXI_151 (.CI(XLXN_346), 
                   .DI(A[8]), 
                   .S(I8), 
                   .O(CO_DUMMY));
   XORCY  XLXI_152 (.CI(XLXN_346), 
                   .LI(I8), 
                   .O(S[8]));
   INV  XLXI_153 (.I(ADD), 
                 .O(SUB8));
   XOR3  XLXI_154 (.I0(A[8]), 
                  .I1(B[8]), 
                  .I2(SUB8), 
                  .O(I8));
   (* RLOC = "X1Y3" *) 
   MUXCY_D  XLXI_155 (.CI(C6), 
                     .DI(A[7]), 
                     .S(XLXN_329), 
                     .LO(XLXN_346), 
                     .O(C6O));

   MUXCY_L  XLXI_156 (.CI(C5), 
                     .DI(A[6]), 
                     .S(I6), 
                     .LO(C6));
endmodule
`timescale 1ns / 1ps

module Mux_2_8_MUSER_Divide_8bit_8bit_restore(Inp0, 
                                              Inp1, 
                                              Sel, 
                                              Outp);

    input [8:0] Inp0;
    input [8:0] Inp1;
    input Sel;
   output [8:0] Outp;
   
   
   MUXCY  XLXI_18 (.CI(Inp1[1]), 
                  .DI(Inp0[1]), 
                  .S(Sel), 
                  .O(Outp[1]));
   MUXCY  XLXI_19 (.CI(Inp1[0]), 
                  .DI(Inp0[0]), 
                  .S(Sel), 
                  .O(Outp[0]));
   MUXCY  XLXI_20 (.CI(Inp1[2]), 
                  .DI(Inp0[2]), 
                  .S(Sel), 
                  .O(Outp[2]));
   MUXCY  XLXI_21 (.CI(Inp1[3]), 
                  .DI(Inp0[3]), 
                  .S(Sel), 
                  .O(Outp[3]));
   MUXCY  XLXI_24 (.CI(Inp1[4]), 
                  .DI(Inp0[4]), 
                  .S(Sel), 
                  .O(Outp[4]));
   MUXCY  XLXI_25 (.CI(Inp1[5]), 
                  .DI(Inp0[5]), 
                  .S(Sel), 
                  .O(Outp[5]));
   MUXCY  XLXI_26 (.CI(Inp1[6]), 
                  .DI(Inp0[6]), 
                  .S(Sel), 
                  .O(Outp[6]));
   MUXCY  XLXI_27 (.CI(Inp1[7]), 
                  .DI(Inp0[7]), 
                  .S(Sel), 
                  .O(Outp[7]));
   MUXCY  XLXI_28 (.CI(Inp1[8]), 
                  .DI(Inp0[8]), 
                  .S(Sel), 
                  .O(Outp[8]));
endmodule
`timescale 1ns / 1ps

module Left_Shift_9Bit_MUSER_Divide_8bit_8bit_restore(Inp, 
                                                      Out_0, 
                                                      Outp);

    input [8:0] Inp;
    input Out_0;
   output [8:0] Outp;
   
   
   BUF  XLXI_1 (.I(Inp[7]), 
               .O(Outp[8]));
   BUF  XLXI_2 (.I(Inp[6]), 
               .O(Outp[7]));
   BUF  XLXI_3 (.I(Inp[5]), 
               .O(Outp[6]));
   BUF  XLXI_4 (.I(Inp[4]), 
               .O(Outp[5]));
   BUF  XLXI_5 (.I(Inp[3]), 
               .O(Outp[4]));
   BUF  XLXI_7 (.I(Out_0), 
               .O(Outp[0]));
   BUF  XLXI_9 (.I(Inp[1]), 
               .O(Outp[2]));
   BUF  XLXI_10 (.I(Inp[0]), 
                .O(Outp[1]));
   BUF  XLXI_11 (.I(Inp[2]), 
                .O(Outp[3]));
endmodule
`timescale 1ns / 1ps

module Divide_8bit_8bit_restore(CLK, 
                                Dividend, 
                                Divisor, 
                                Sel, 
                                Enable, 
                                Quotient, 
                                Remainder);

    input CLK;
    input [7:0] Dividend;
    input [7:0] Divisor;
    input Sel;
   output Enable;
   output [7:0] Quotient;
   output [8:0] Remainder;
   
   wire [7:0] Quo_1;
   wire [8:0] Remainder_new;
   wire [8:0] Rem_man;
   wire [8:0] XLXN_3;
   wire [8:0] XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire [7:0] XLXN_65;
   wire XLXN_70;
   wire XLXN_82;
   wire XLXN_89;
   wire XLXN_94;
   wire Enable_DUMMY;
   wire [7:0] Quotient_DUMMY;
   wire [8:0] Remainder_DUMMY;
   
   assign Enable = Enable_DUMMY;
   assign Quotient[7:0] = Quotient_DUMMY[7:0];
   assign Remainder[8:0] = Remainder_DUMMY[8:0];
   Mux_2_8_MUSER_Divide_8bit_8bit_restore  XLXI_2 (.Inp0(Rem_man[8:0]), 
                                                  .Inp1(XLXN_3[8:0]), 
                                                  .Sel(Rem_man[8]), 
                                                  .Outp(Remainder_new[8:0]));
   FD9CE  XLXI_3 (.C(CLK), 
                 .CE(Enable_DUMMY), 
                 .CLR(Sel), 
                 .D(Remainder_new[8:0]), 
                 .Q(Remainder_DUMMY[8:0]));
   Left_Shift_9Bit_MUSER_Divide_8bit_8bit_restore  XLXI_4 
         (.Inp(Remainder_DUMMY[8:0]), 
                                                          
         .Out_0(Quotient_DUMMY[7]), 
                                                          .Outp(XLXN_3[8:0]));
   sub9bit_MUSER_Divide_8bit_8bit_restore  XLXI_5 (.A(XLXN_3[8:0]), 
                                                  .ADD(XLXN_12), 
                                                  .B(XLXN_10[8:0]), 
                                                  .CI(XLXN_13), 
                                                  .CO(), 
                                                  .OFL(), 
                                                  .S(Rem_man[8:0]));
   GND  XLXI_7 (.G(XLXN_12));
   VCC  XLXI_8 (.P(XLXN_13));
   Bit8_to_bit9  XLXI_13 (.Data_8(Divisor[7:0]), 
                         .Data_9(XLXN_10[8:0]));
   (* HU_SET = "XLXI_41_37" *) 
   FD8CE_MXILINX_Divide_8bit_8bit_restore  XLXI_41 (.C(CLK), 
                                                   .CE(XLXN_94), 
                                                   .CLR(XLXN_82), 
                                                   .D(Quo_1[7:0]), 
                                                   .Q(Quotient_DUMMY[7:0]));
   Mux_2_8Bit_MUSER_Divide_8bit_8bit_restore  XLXI_43 (.Inp0(XLXN_65[7:0]), 
                                                      .Inp1(Dividend[7:0]), 
                                                      .Sel(Sel), 
                                                      .Outp(Quo_1[7:0]));
   Left_Shift_8Bit_MUSER_Divide_8bit_8bit_restore  XLXI_45 
         (.Inp(Quotient_DUMMY[7:0]), 
                                                           .Out_0(XLXN_70), 
                                                           .Outp(XLXN_65[7:0]));
   INV  XLXI_46 (.I(Rem_man[8]), 
                .O(XLXN_70));
   NOR2  XLXI_49 (.I0(XLXN_89), 
                 .I1(Sel), 
                 .O(Enable_DUMMY));
   GND  XLXI_51 (.G(XLXN_82));
   (* HU_SET = "XLXI_54_36" *) 
   CB4CE_MXILINX_Divide_8bit_8bit_restore  XLXI_54 (.C(CLK), 
                                                   .CE(Enable_DUMMY), 
                                                   .CLR(Sel), 
                                                   .CEO(), 
                                                   .Q0(), 
                                                   .Q1(), 
                                                   .Q2(), 
                                                   .Q3(XLXN_89), 
                                                   .TC());
   OR2  XLXI_56 (.I0(Sel), 
                .I1(Enable_DUMMY), 
                .O(XLXN_94));
endmodule
