////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : Combing_Alpha.vf
// /___/   /\     Timestamp : 09/26/2016 01:31:11
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "E:/Dept Porj/Digital Lab/Xillinx/OCR/Combing_Alpha.vf" -w "E:/Dept Porj/Digital Lab/Xillinx/OCR/Combing_Alpha.sch"
//Design Name: Combing_Alpha
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Main_Module_MUSER_Combing_Alpha(CE, 
                                       CLK, 
                                       Cn, 
                                       IP_COUN, 
                                       RST, 
                                       Xn, 
                                       OP_AR);

    input CE;
    input CLK;
    input [7:0] Cn;
    input [7:0] IP_COUN;
    input RST;
    input [7:0] Xn;
   output [31:0] OP_AR;
   
   wire [31:0] ABOneByN;
   wire [15:0] A_B;
   wire [16:0] One_By_N;
   wire [31:0] Sum_XnCn_Byn;
   wire [31:0] SUM_Xn_CN_One_Min_ByN;
   wire [31:0] OP_AR_DUMMY;
   
   assign OP_AR[31:0] = OP_AR_DUMMY[31:0];
   Booth_Comb  XLXI_2 (.a(Xn[7:0]), 
                      .b(Cn[7:0]), 
                      .c(A_B[15:0]));
   Into1byN  XLXI_3 (.OnebyN(One_By_N[16:0]), 
                    .XnCn(A_B[15:0]), 
                    .Op(ABOneByN[31:0]));
   OneByN  XLXI_4 (.N(IP_COUN[7:0]), 
                  .OneByN(One_By_N[16:0]));
   Adder_32  XLXI_5 (.A(ABOneByN[31:0]), 
                    .B(SUM_Xn_CN_One_Min_ByN[31:0]), 
                    .C(), 
                    .S(Sum_XnCn_Byn[31:0]));
   FD32CE  XLXI_6 (.CE(CE), 
                  .CLK(CLK), 
                  .D(Sum_XnCn_Byn[31:0]), 
                  .RST(RST), 
                  .Q(OP_AR_DUMMY[31:0]));
   Into_1_min_1_by_n  XLXI_8 (.D(OP_AR_DUMMY[31:0]), 
                             .One_by_N(One_By_N[16:0]), 
                             .Prod(SUM_Xn_CN_One_Min_ByN[31:0]));
endmodule
`timescale 1ns / 1ps

module FTCE_MXILINX_Combing_Alpha(C, 
                                  CE, 
                                  CLR, 
                                  T, 
                                  Q);

   parameter INIT = 1'b0;
   
    input C;
    input CE;
    input CLR;
    input T;
   output Q;
   
   wire TQ;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   XOR2  I_36_32 (.I0(T), 
                 .I1(Q_DUMMY), 
                 .O(TQ));
   (* RLOC = "X0Y0" *) 
   FDCE  I_36_35 (.C(C), 
                 .CE(CE), 
                 .CLR(CLR), 
                 .D(TQ), 
                 .Q(Q_DUMMY));
endmodule
`timescale 1ns / 1ps

module CB8CE_MXILINX_Combing_Alpha(C, 
                                   CE, 
                                   CLR, 
                                   CEO, 
                                   Q, 
                                   TC);

    input C;
    input CE;
    input CLR;
   output CEO;
   output [7:0] Q;
   output TC;
   
   wire T2;
   wire T3;
   wire T4;
   wire T5;
   wire T6;
   wire T7;
   wire XLXN_1;
   wire [7:0] Q_DUMMY;
   wire TC_DUMMY;
   
   assign Q[7:0] = Q_DUMMY[7:0];
   assign TC = TC_DUMMY;
   (* HU_SET = "I_Q0_20" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q0 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(XLXN_1), 
                                    .Q(Q_DUMMY[0]));
   (* HU_SET = "I_Q1_21" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q1 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(Q_DUMMY[0]), 
                                    .Q(Q_DUMMY[1]));
   (* HU_SET = "I_Q2_17" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q2 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T2), 
                                    .Q(Q_DUMMY[2]));
   (* HU_SET = "I_Q3_18" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q3 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T3), 
                                    .Q(Q_DUMMY[3]));
   (* HU_SET = "I_Q4_19" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q4 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T4), 
                                    .Q(Q_DUMMY[4]));
   (* HU_SET = "I_Q5_16" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q5 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T5), 
                                    .Q(Q_DUMMY[5]));
   (* HU_SET = "I_Q6_15" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q6 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T6), 
                                    .Q(Q_DUMMY[6]));
   (* HU_SET = "I_Q7_14" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q7 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T7), 
                                    .Q(Q_DUMMY[7]));
   AND5  I_36_1 (.I0(Q_DUMMY[7]), 
                .I1(Q_DUMMY[6]), 
                .I2(Q_DUMMY[5]), 
                .I3(Q_DUMMY[4]), 
                .I4(T4), 
                .O(TC_DUMMY));
   AND2  I_36_2 (.I0(Q_DUMMY[4]), 
                .I1(T4), 
                .O(T5));
   AND3  I_36_11 (.I0(Q_DUMMY[5]), 
                 .I1(Q_DUMMY[4]), 
                 .I2(T4), 
                 .O(T6));
   AND4  I_36_15 (.I0(Q_DUMMY[3]), 
                 .I1(Q_DUMMY[2]), 
                 .I2(Q_DUMMY[1]), 
                 .I3(Q_DUMMY[0]), 
                 .O(T4));
   VCC  I_36_16 (.P(XLXN_1));
   AND2  I_36_24 (.I0(Q_DUMMY[1]), 
                 .I1(Q_DUMMY[0]), 
                 .O(T2));
   AND3  I_36_26 (.I0(Q_DUMMY[2]), 
                 .I1(Q_DUMMY[1]), 
                 .I2(Q_DUMMY[0]), 
                 .O(T3));
   AND4  I_36_28 (.I0(Q_DUMMY[6]), 
                 .I1(Q_DUMMY[5]), 
                 .I2(Q_DUMMY[4]), 
                 .I3(T4), 
                 .O(T7));
   AND2  I_36_31 (.I0(CE), 
                 .I1(TC_DUMMY), 
                 .O(CEO));
endmodule
`timescale 1ns / 1ps

module CB4CE_MXILINX_Combing_Alpha(C, 
                                   CE, 
                                   CLR, 
                                   CEO, 
                                   Q0, 
                                   Q1, 
                                   Q2, 
                                   Q3, 
                                   TC);

    input C;
    input CE;
    input CLR;
   output CEO;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   output TC;
   
   wire T2;
   wire T3;
   wire XLXN_1;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire Q3_DUMMY;
   wire TC_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign Q3 = Q3_DUMMY;
   assign TC = TC_DUMMY;
   (* HU_SET = "I_Q0_22" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q0 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(XLXN_1), 
                                    .Q(Q0_DUMMY));
   (* HU_SET = "I_Q1_23" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q1 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(Q0_DUMMY), 
                                    .Q(Q1_DUMMY));
   (* HU_SET = "I_Q2_24" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q2 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T2), 
                                    .Q(Q2_DUMMY));
   (* HU_SET = "I_Q3_25" *) 
   FTCE_MXILINX_Combing_Alpha #( .INIT(1'b0) ) I_Q3 (.C(C), 
                                    .CE(CE), 
                                    .CLR(CLR), 
                                    .T(T3), 
                                    .Q(Q3_DUMMY));
   AND4  I_36_31 (.I0(Q3_DUMMY), 
                 .I1(Q2_DUMMY), 
                 .I2(Q1_DUMMY), 
                 .I3(Q0_DUMMY), 
                 .O(TC_DUMMY));
   AND3  I_36_32 (.I0(Q2_DUMMY), 
                 .I1(Q1_DUMMY), 
                 .I2(Q0_DUMMY), 
                 .O(T3));
   AND2  I_36_33 (.I0(Q1_DUMMY), 
                 .I1(Q0_DUMMY), 
                 .O(T2));
   VCC  I_36_58 (.P(XLXN_1));
   AND2  I_36_67 (.I0(CE), 
                 .I1(TC_DUMMY), 
                 .O(CEO));
endmodule
`timescale 1ns / 1ps

module Counters_MUSER_Combing_Alpha(CLK, 
                                    CLR, 
                                    IP_ADDR, 
                                    IP_Count, 
                                    TC, 
                                    TEN);

    input CLK;
    input CLR;
   output [3:0] IP_ADDR;
   output [7:0] IP_Count;
   output TC;
   output TEN;
   
   wire [3:0] IP_ADDR_DUMMY;
   wire TEN_DUMMY;
   wire TC_DUMMY;
   
   assign IP_ADDR[3:0] = IP_ADDR_DUMMY[3:0];
   assign TC = TC_DUMMY;
   assign TEN = TEN_DUMMY;
   (* HU_SET = "XLXI_1_26" *) 
   CB4CE_MXILINX_Combing_Alpha  XLXI_1 (.C(CLK), 
                                       .CE(TC_DUMMY), 
                                       .CLR(CLR), 
                                       .CEO(), 
                                       .Q0(IP_ADDR_DUMMY[0]), 
                                       .Q1(IP_ADDR_DUMMY[1]), 
                                       .Q2(IP_ADDR_DUMMY[2]), 
                                       .Q3(IP_ADDR_DUMMY[3]), 
                                       .TC());
   (* HU_SET = "XLXI_4_27" *) 
   CB8CE_MXILINX_Combing_Alpha  XLXI_4 (.C(CLK), 
                                       .CE(TEN_DUMMY), 
                                       .CLR(CLR), 
                                       .CEO(), 
                                       .Q(IP_Count[7:0]), 
                                       .TC(TC_DUMMY));
   NAND2  XLXI_8 (.I0(IP_ADDR_DUMMY[3]), 
                 .I1(IP_ADDR_DUMMY[1]), 
                 .O(TEN_DUMMY));
endmodule
`timescale 1ns / 1ps

module mux_2_4bit_MUSER_Combing_Alpha(in0, 
                                      in1, 
                                      S, 
                                      op);

    input [3:0] in0;
    input [3:0] in1;
    input S;
   output [3:0] op;
   
   
   MUXCY  XLXI_1 (.CI(in1[0]), 
                 .DI(in0[0]), 
                 .S(S), 
                 .O(op[0]));
   MUXCY  XLXI_2 (.CI(in1[1]), 
                 .DI(in0[1]), 
                 .S(S), 
                 .O(op[1]));
   MUXCY  XLXI_3 (.CI(in1[3]), 
                 .DI(in0[3]), 
                 .S(S), 
                 .O(op[3]));
   MUXCY  XLXI_4 (.CI(in1[2]), 
                 .DI(in0[2]), 
                 .S(S), 
                 .O(op[2]));
endmodule
`timescale 1ns / 1ps

module FD4CE_B_MUSER_Combing_Alpha(C, 
                                   CE, 
                                   CLR, 
                                   D, 
                                   Q);

    input C;
    input CE;
    input CLR;
    input [3:0] D;
   output [3:0] Q;
   
   
   FDCE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[0]), 
              .Q(Q[0]));
   FDCE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[1]), 
              .Q(Q[1]));
   FDCE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[2]), 
              .Q(Q[2]));
   FDCE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[3]), 
              .Q(Q[3]));
endmodule
`timescale 1ns / 1ps

module Max_at_num_MUSER_Combing_Alpha(A, 
                                      A_AC, 
                                      C, 
                                      CE, 
                                      CLR, 
                                      B);

    input [3:0] A;
    input [31:0] A_AC;
    input C;
    input CE;
    input CLR;
   output [3:0] B;
   
   wire [31:0] XLXN_17;
   wire [3:0] XLXN_18;
   wire [31:0] XLXN_19;
   wire XLXN_24;
   wire [3:0] B_DUMMY;
   
   assign B[3:0] = B_DUMMY[3:0];
   mux_2_4bit_MUSER_Combing_Alpha  XLXI_7 (.in0(B_DUMMY[3:0]), 
                                          .in1(A[3:0]), 
                                          .S(XLXN_24), 
                                          .op(XLXN_18[3:0]));
   FD4CE_B_MUSER_Combing_Alpha  XLXI_8 (.C(C), 
                                       .CE(CE), 
                                       .CLR(CLR), 
                                       .D(XLXN_18[3:0]), 
                                       .Q(B_DUMMY[3:0]));
   FD32CE  XLXI_9 (.CE(CE), 
                  .CLK(C), 
                  .D(XLXN_19[31:0]), 
                  .RST(CLR), 
                  .Q(XLXN_17[31:0]));
   MAX_2_32  XLXI_11 (.I0(XLXN_17[31:0]), 
                     .I1(A_AC[31:0]), 
                     .C(XLXN_19[31:0]), 
                     .S(XLXN_24));
endmodule
`timescale 1ns / 1ps

module Combing_Alpha(CLK, 
                     CLR, 
                     Test, 
                     OCR);

    input CLK;
    input CLR;
    input [3:0] Test;
   output [3:0] OCR;
   
   wire [7:0] Cn;
   wire [3:0] IP_ADDR;
   wire [7:0] IP_CNT;
   wire [31:0] OPAR;
   wire TC;
   wire TEN;
   wire XLXN_69;
   wire XLXN_78;
   wire [7:0] Xn;
   
   Max_at_num_MUSER_Combing_Alpha  XLXI_6 (.A(IP_ADDR[3:0]), 
                                          .A_AC(OPAR[31:0]), 
                                          .C(CLK), 
                                          .CE(TC), 
                                          .CLR(CLR), 
                                          .B(OCR[3:0]));
   Counters_MUSER_Combing_Alpha  XLXI_7 (.CLK(CLK), 
                                        .CLR(CLR), 
                                        .IP_ADDR(IP_ADDR[3:0]), 
                                        .IP_Count(IP_CNT[7:0]), 
                                        .TC(TC), 
                                        .TEN(TEN));
   FD #( .INIT(1'b0) ) XLXI_8 (.C(CLK), 
              .D(TC), 
              .Q(XLXN_78));
   OR2  XLXI_10 (.I0(XLXN_78), 
                .I1(CLR), 
                .O(XLXN_69));
   Main_Module_MUSER_Combing_Alpha  XLXI_12 (.CE(TEN), 
                                            .CLK(CLK), 
                                            .Cn(Cn[7:0]), 
                                            .IP_COUN(IP_CNT[7:0]), 
                                            .RST(XLXN_69), 
                                            .Xn(Xn[7:0]), 
                                            .OP_AR(OPAR[31:0]));
   Memory_txt  XLXI_13 (.ip_address(IP_ADDR[3:0]), 
                       .ip_count(IP_CNT[7:0]), 
                       .Test(Test[3:0]), 
                       .opA(Xn[7:0]), 
                       .opT(Cn[7:0]));
endmodule
